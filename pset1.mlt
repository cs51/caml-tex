\documentclass{amsart}

\input{../../LaTeX/cs51-preamble}
\include{graphics}

\title[CS51 Problem Set 1]{CS51 Problem Set 1:\\Core Functional Programming}
%\author{Stuart M. Shieber}
\date{\today}

\begin{document}

\maketitle

\textbf{This problem set is due February 12, 2016 at 5:00pm EST.}\\\\
\textbf{This problem set is an individual problem set, not a partner problem set.
 Please refer to the course collaboration policy for more information.}


\setcounter{section}{-1}
\section{Introduction}

The goal of this problem set is to introduce you to OCaml and the ideas
underlying statically-typed functional languages.

We'll assume that you have successfully configured your development
environment as specified by Problem Set 0. If not, you'll want to do
that before getting started.

To download the problem set, follow the instructions found \href{http://tiny.cc/cs51reference}{here}.
Now, you're ready to get started with the problem set. Open the directory
"\texttt{1}", and you will find a file (\texttt{ps1.ml}) that contains a
commented-out stub for each function you are asked to implement.
\textbf{You should uncomment them as you fill in your solutions.}

\subsection{Keep in Mind}

\begin{enumerate}
\item
  \textbf{Style.} Style is an extremely important part of programming
  well. Style is not only useful in making code more readable, but also
  in identifying syntactic and type errors in your functions. For all
  problem sets, your code must adhere to the
  \href{http://sites.fas.harvard.edu/~cs51/style_guide.html}{CS51 Style
  Guide} for full credit.
\item
  \textbf{Compilation Errors.} In order to submit your work to Vocareum, \textbf{your solution
  must compile against our test suite.} The system will reject submissions that do not compile.
  If there are problems that you are unable to solve, you must still write a function
  that matches the expected type signature, or your code will not compile. When we provide stub code, 
  that code will compile to begin with. If you are having difficulty
  getting your code to compile, please visit office hours or post on Piazza. {\em Emailing your homework to your TF or the Head TFs is \textbf{not} a valid substitute for submitting on Vocareum. Please start early.}
\item
  \textbf{Testing.} Thorough testing is important in all your projects,
  and we hope to impart this belief to you in CS51. Testing will help
  you find bugs, avoid mistakes, and teach you the value of short, clear
  functions. Problem 2b contains prewritten tests that use assert
  statements. Spend some time understanding how the \texttt{assert}
  statement works and why these tests are comprehensive. \textbf{\Large For each
  function in Problem 2, you must write tests that cover all code paths
  and corner cases.}\\\\ To run your assert statements, run the
  \texttt{make} command in the directory with your ps1.ml and then run
  the compiled program by executing \texttt{./ps1_tests.byte}. If the
  assertion fails, an exception will be printed. If the assertion
  passes, there will be no output.

  You \textbf{must} write \texttt{assert} statements that thoroughly
  test the functionality of each of the remaining sections of Problem 2.
  You will write these tests in \texttt{ps1_test.ml}, which references
  your solutions. Example tests are provided for Problem 2b. 

  {\em As this may be your first time writing tests, we require that you
  write the larger of: at least three tests per sub-problem, or as many tests as are
  required to ensure that your code is tested thoroughly. }

\item
  \textbf{Helper Functions.} Feel free to use them to make your code
  cleaner, more modular, and/or easier to test.
\end{enumerate}

\section{Problem 1: Fun With Types}

\subsection{Parts a-c:} In \texttt{ps1.ml}, you will see several functions called \texttt{prob0, prob1a, prob1b, prob1c} inside of a comment. Uncomment this block of functions, and replace the ??? in the type signature with the correct signature. Also replace the ??? in the corresponding value defined below the functions with a string representing the appropriate type. 

Parts d-f: Explain in a comment why the expressions don't type check,
and provide a fix by changing the type, modifying the expression, or
both. More detail inside \texttt{ps1.ml}. 

\section{Problem 2: A Series of Tasks}

Write the following functions. See the comments in \texttt{ps1.ml} for
the specifications. Please give the functions the names listed in the
comments and enumerated in the list below, 
as they are must be named specifically in order to compile 
against our automated unit tests.

{\em You may \textbf{not} use any library functions in Problem 2.} The best way to
learn about the core language is to work directly with the core language
features.

\begin{enumerate}
\item
\begin{caml_listing}
reversed : int list -> bool
\end{caml_listing}
\item
\begin{verbatim}
merge : int list -> int list -> int list
\end{verbatim}
\item
\begin{verbatim}
unzip : (int * int) list -> int list * int list
\end{verbatim}
\item
\begin{verbatim}
variance : float list -> float option
\end{verbatim}
\item
\begin{verbatim}
few_divisors : int -> int -> bool
\end{verbatim}
\item
\begin{verbatim}
concat_list : string -> string list -> string
\end{verbatim}
\item
\begin{verbatim}
to_run_length: char list -> (int * char) list
\end{verbatim}
\item
\begin{verbatim}
from_run_length: (int * char) list -> char list
\end{verbatim}
\end{enumerate}

\begin{center}
\textbf{Remember: your problem set is not complete if you have not written unit tests for your work.}
\end{center}

\section{Problem 3: Challenge!}

This problem is for karma (not required). Write a function with the
following signature: \\

\begin{verbatim}
permutations : int list -> int list list
\end{verbatim}

Please see \texttt{ps1.ml} for more details and hints. Do not worry
about duplicates in the list. You may use the List library functions to
solve this problem.

\section{Submit!}

To submit the problem set, just follow the instructions found \href{http://tiny.cc/cs51reference}{here}!

\end{document}
